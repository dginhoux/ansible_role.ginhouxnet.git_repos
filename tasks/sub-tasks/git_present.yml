---
- name: "Get path infos {{ repo.path }}"
  register: stat_path
  ansible.builtin.stat:
    path: "{{ repo.path }}"

- name: "Get current git status in {{ repo.path }}"
  register: stat_git
  ansible.builtin.stat:
    path: "{{ repo.path }}/.git"

- name: "Include git init tasks for {{ repo.name }}"
  when: repo.make_init | bool
  ansible.builtin.include_tasks:
    file: "tasks/sub-tasks/git_init.yml"

- name: "Include git config tasks for {{ repo.name }}"
  when: repo.make_conf_options | bool
  ansible.builtin.include_tasks:
    file: "tasks/sub-tasks/git_config.yml"

- name: "Include git remote tasks for {{ repo.name }}"
  when:
    - stat_git.stat.exists | bool
    - repo.remotes is iterable
    - repo.make_conf_remotes | bool
  loop: "{{ repo.remotes | flatten }}"
  loop_control:
    loop_var: remote
    label: "remote: {{ remote.name }}"
  ansible.builtin.include_tasks:
    file: "tasks/sub-tasks/git_remote.yml"

- name: "Include git action tasks for {{ repo.name }}"
  when:
    - stat_git.stat.exists | bool
    - repo.actions is iterable
    - action.name is defined
    - action.name is in "add,command,commit,pull,push"
  loop: "{{ repo.actions | flatten }}"
  loop_control:
    loop_var: action
    label: "action: {{ action.name }}"
  # ignore_errors: "{{ action.ignore_error | default('false') | bool }}"
  ansible.builtin.include_tasks:
    file: "tasks/sub-tasks/git_action_{{ action.name }}.yml"


# - name: "[{{ ansible_loop.index }}/{{ ansible_loop.length }}] {{ repo.name }} include git submodules config tasks"
#   ansible.builtin.include_tasks:
#     file: "tasks/sub-tasks/git_enable_submodules_config.yml"
#   loop: "{{ repo.submodules | flatten }}"
#   loop_control:
#     loop_var: remote
#   when:
#     - stat_git.stat.exists | bool
#     - repo.submodules is iterable
#     - repo.make_submodules_conf | bool

# - name: "[{{ ansible_loop.index }}/{{ ansible_loop.length }}] {{ repo.name }} include git submodules actions tasks"
#   ansible.builtin.include_tasks:
#     file: "tasks/sub-tasks/git_enable_submodules_actions.yml"
#   loop: "{{ repo.submodules | flatten }}"
#   loop_control:
#     loop_var: remote
#   when:
#     - stat_git.stat.exists | bool
#     - repo.submodules is iterable
#     - repo.make_submodules_actions | bool
